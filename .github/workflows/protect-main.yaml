name: Protect Main and Auto-version

on:
  pull_request_target:
    types:
      - opened
      - reopened
    branches:
      - main
jobs:
  close:
    runs-on: ubuntu-latest
    outputs:
      closed: ${{ steps.close.outputs.closed }}
      issue: ${{ steps.issue.outputs.issue }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Check if valid feature or bugfix branch
        id: check_branch
        run: |
          if [[ '${{ github.head_ref }}' =~ (FEATURE|BUGFIX)-AQC-[0-9]+-.+ ]]; then
            echo "VALID_BRANCH_NAME=true" >> $GITHUB_ENV
            if [[ '${{ github.head_ref }}' =~ FEATURE.* ]]; then
              echo "GH_ISSUE_TYPE=FEATURE" >> $GITHUB_ENV
            elif [[ '${{ github.head_ref }}' =~ BUGFIX.* ]]; then
              echo "GH_ISSUE_TYPE=BUGFIX" >> $GITHUB_ENV
            fi
          else
            echo "VALID_BRANCH_NAME=false" >> $GITHUB_ENV
          fi
      - name: Increment version number based on branch name
        if: env.VALID_BRANCH_NAME == 'true'
        run: |
          python -c "
          import os
          import re

          version_file='/home/runner/work/increment-version-number/increment-version-number/version.txt'
          print(f'::debug::{os.getcwd()}')
          with open(version_file, 'r') as file:
              version = file.read()
              print(f'::debug::{version}')
              version = version.strip()
          match = re.match(r'(\d+)\.(\d+)\.(\d+)', version)
          if not match: 
            raise ValueError(match)
          if match:
              major = match.group(1)
              minor = match.group(2)
              patch = match.group(3)
              if '${{ env.GH_ISSUE_TYPE }}' == 'FEATURE':
                  minor = int(minor) + 1
              elif '${{ env.GH_ISSUE_TYPE }}' == 'BUGFIX':
                  patch = int(patch) + 1
              new_version = f'{major}.{minor}.{patch}'
              with open(version_file, 'w') as file:
                  file.write(new_version)
          else:
              raise ValueError('Version format not recognized: ' + version)"
