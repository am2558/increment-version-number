name: Auto-version
on:
  workflow_dispatch:

jobs:
  close:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      closed: ${{ steps.close.outputs.closed }}
      issue: ${{ steps.issue.outputs.issue }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if valid feature or bugfix branch
        id: check_branch
        run: |
          echo "Current ref: ${{ github.ref }}"
          branch_name="${{ github.ref }}"
          branch_name=${branch_name#refs/heads/}
          echo "Current branch name: $branch_name"
          if [[ "$branch_name" =~ (FEATURE|BUGFIX)-AQC-[0-9]+-.+ ]] || [[ "$branch_name" =~ TQA-[0-9]+-.+ ]]; then
            echo "VALID_BRANCH_NAME=true" >> $GITHUB_ENV
            if [[ "$branch_name" =~ FEATURE.* ]]; then
              echo "GH_ISSUE_TYPE=FEATURE" >> $GITHUB_ENV
            elif [[ "$branch_name" =~ BUGFIX.* ]]; then
              echo "GH_ISSUE_TYPE=BUGFIX" >> $GITHUB_ENV
            elif [[ "$branch_name" =~ TQA.* ]]; then
              echo "GH_ISSUE_TYPE=BUGFIX" >> $GITHUB_ENV
            fi
          else
            echo "VALID_BRANCH_NAME=false" >> $GITHUB_ENV
          fi

      - name: Fetch pull request details
        id: pr_details
        uses: octokit/request-action@v2.x
        if: env.VALID_BRANCH_NAME == 'true'
        with:
          route: GET /repos/${{ github.repository }}/pulls
          parameters: |
            {
              "head": "${{ github.repository }}:${branch_name}",
              "state": "open"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR labels
        id: extract_labels
        run: |
          PR_LABEL_JSON=$(echo '${{ steps.pr_details.outputs.data }}' | jq '.[0].labels')
          PR_LABEL=$(echo $PR_LABEL_JSON | jq -r '.[0].name')
          echo "PR_LABEL=$PR_LABEL" >> $GITHUB_ENV

      - name: Increment version number based on branch name
        id: bump_version
        if: env.VALID_BRANCH_NAME == 'true'
        run: |
          python -c "
          import os
          import re
          version_file='code/django/version.txt'
          print(f'::debug::{os.getcwd()}')
          
          with open(version_file, 'r') as file:
              version_lines = file.readlines()
          version = version_lines[0].strip()
          print(f'::debug::{version} version file before incrementing')
          match = re.match(r'(\d+)\.(\d+)\.(\d+)(-.+)?', version)
          if not match: 
              raise ValueError(match)
          
          major, minor, patch, suffix = match.groups() 
          pr_label = os.getenv('PR_LABEL')
          print(f'PR Label: {pr_label}')
          if pr_label:
              if pr_label == 'Major Version':
                  major = int(major) + 1
              elif pr_label == 'Minor Version':
                  minor = int(minor) + 1
              elif pr_label == 'Bugfix Version':
                  patch = int(patch) + 1
          else:
              if '${{ env.GH_ISSUE_TYPE }}' == 'FEATURE':
                  minor = int(minor) + 1
              elif '${{ env.GH_ISSUE_TYPE }}' == 'BUGFIX':
                  patch = int(patch) + 1
          
          new_version = f'{major}.{minor}.{patch}'
          if suffix:
              new_version += suffix
          with open(version_file, 'w') as file:
              file.write(new_version)
          print(f'::debug::New version: {new_version}')
          print(f'::set-output name=new_version::{new_version}')"
      - name: Read version
        run: |
          VERSION="$(cat code/django/VERSION.txt)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV            
      - name: Create GitHub Tag
        id: tag_version
        run: |
          echo "New version: ${{ env.VERSION }}"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - uses: EndBug/add-and-commit@v9
        with:
          ref: ${{ github.ref }}
          add: "code/django/version.txt"
          author_name: am2558
          author_email: am2558@cornell.edu
          commit: --signoff
          committer_name: am2558
          committer_email: am2558@cornell.edu
          cwd: "."
          default_author: github_actor
          fetch: true
          message: "increment version number"
          pathspec_error_handling: exitImmediately
          push: true

      # - name: Login to Quay.io
      #   uses: docker/login-action@v2
      #   with:
      #     registry: quay.io
      #     username: ${{ vars.QUAY_USERNAME }}
      #     password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       quay.io/aliro-technologies/aliro-orchestrator:${{ steps.bump_version.outputs.new_version }}
      #       quay.io/aliro-technologies/aliro-orchestrator:latest
 