name: Auto-version
on:
  workflow_dispatch:

jobs:
  close:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      closed: ${{ steps.close.outputs.closed }}
      issue: ${{ steps.issue.outputs.issue }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if valid feature or bugfix branch
        id: check_branch
        run: |
          echo "Current ref: ${{ github.ref }}"
          branch_name="${{ github.ref }}"
          branch_name=${branch_name#refs/heads/}
          echo "Current branch name: $branch_name"
          if [[ "$branch_name" =~ (FEATURE|BUGFIX|TQA)-AQC-[0-9]+-.+ ]]; then
            echo "VALID_BRANCH_NAME=true" >> $GITHUB_ENV
            if [[ "$branch_name" =~ FEATURE.* ]]; then
              echo "GH_ISSUE_TYPE=FEATURE" >> $GITHUB_ENV
            elif [[ "$branch_name" =~ BUGFIX.* ]]; then
              echo "GH_ISSUE_TYPE=BUGFIX" >> $GITHUB_ENV
            elif [[ "$branch_name" =~ TQA.* ]]; then
              echo "GH_ISSUE_TYPE=BUGFIX" >> $GITHUB_ENV
            fi
          else
            echo "VALID_BRANCH_NAME=false" >> $GITHUB_ENV
          fi

      - name: Set PR_LABEL environment variable
        run: |
          PR_LABEL_JSON='${{ toJson(github.event.pull_request.labels.*.name) }}'
          PR_LABEL=$(echo $PR_LABEL_JSON | jq -r '.[0]')
          echo "PR_LABEL=$PR_LABEL" >> $GITHUB_ENV
          
      - name: Increment version number based on branch name
        if: env.VALID_BRANCH_NAME == 'true'
        run: |
          python -c "
          import os
          import re
          version_file='code/django/version.txt'
          print(f'::debug::{os.getcwd()}')
          
          with open(version_file, 'r') as file:
              version_lines = file.readlines()
          version = version_lines[0].strip()
          print(f'::debug::{version} version file before incrementing')
          match = re.match(r'(\d+)\.(\d+)\.(\d+)(-.+)?', version)
          if not match: 
              raise ValueError(match)
          
          major, minor, patch, suffix = match.groups() 
          pr_label = os.getenv('PR_LABEL')
          print(f'PR Label: {pr_label}')
          if pr_label:
              if pr_label == 'Major Version':
                  major = int(major) + 1
              elif pr_label == 'Minor Version':
                  minor = int(minor) + 1
              elif pr_label == 'Bugfix Version':
                  patch = int(patch) + 1
          else:
              if '${{ env.GH_ISSUE_TYPE }}' == 'FEATURE':
                  minor = int(minor) + 1
              elif '${{ env.GH_ISSUE_TYPE }}' == 'BUGFIX':
                  patch = int(patch) + 1
          
          new_version = f'{major}.{minor}.{patch}'
          if suffix:
              new_version += suffix
          with open(version_file, 'w') as file:
              file.write(new_version)
          print(f'::debug::New version: {new_version}')"
          
      - uses: EndBug/add-and-commit@v9 # You can change this to use a specific version.
        with:
          ref: main
          add: "code/django/version.txt"
          author_name: am2558
          author_email: am2558@cornell.edu
          commit: --signoff
          committer_name: am2558
         
