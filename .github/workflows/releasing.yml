name: Auto-version
on:
  workflow_dispatch:

jobs:
  close:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      closed: ${{ steps.close.outputs.closed }}
      issue: ${{ steps.issue.outputs.issue }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install towncrier requests

### change this -- increment version number based on release notes. ex. 4 instances of "bugfi"x means you bump patch, 4 instances of "feature" means you bump minor number.
      - name: Increment version number based on branch name
        id: bump_version
        if: env.VALID_BRANCH_NAME == 'true'
        run: |
          python -c "
          import os
          import re
          version_file='code/django/version.txt'
          print(f'::debug::{os.getcwd()}')
          
          with open(version_file, 'r') as file:
              version_lines = file.readlines()
          version = version_lines[0].strip()
          print(f'::debug::{version} version file before incrementing')
          match = re.match(r'(\d+)\.(\d+)\.(\d+)(-.+)?', version)
          if not match: 
              raise ValueError(match)
          
          major, minor, patch, suffix = match.groups() 
          pr_label = os.getenv('PR_LABEL')
          print(f'PR Label: {pr_label}')
          if pr_label:
              if pr_label == 'Major Version': 
                  major = int(major) + 1
              elif pr_label == 'Minor Version':
                  minor = int(minor) + 1
              elif pr_label == 'Bugfix Version':
                  patch = int(patch) + 1
          else:
              if '${{ env.GH_ISSUE_TYPE }}' == 'FEATURE':
                  minor = int(minor) + 1
              elif '${{ env.GH_ISSUE_TYPE }}' == 'BUGFIX':
                  patch = int(patch) + 1
          
          new_version = f'{major}.{minor}.{patch}'
          if suffix:
              new_version += suffix
          with open(version_file, 'w') as file:
              file.write(new_version)
          print(f'::debug::New version: {new_version}')
          print(f'::set-output name=new_version::{new_version}')
          os.environ['NEW_VERSION'] = new_version
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f'NEW_VERSION={new_version}\n')"

      - name: Create GitHub Tag
        id: tag_version
        run: |
          echo "New version: ${{ env.NEW_VERSION }}"
          git tag v${{ env.NEW_VERSION }}
          git push origin v${{ env.NEW_VERSION }}

      - name: Read Release Notes
        id: release_notes
        run: |
          RELEASE_NOTES=$(cat NEWS.rst)
          echo "::set-output name=notes::$RELEASE_NOTES"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: EndBug/add-and-commit@v9
        with:
          ref: ${{ github.ref }}
          add: code/django/version.txt
          author_name: 'Github Actions - Releasing Workflow'
          author_email: actions@github.com
          commit: --signoff
          committer_name: 'Github Actions - Releasing Workflow'
          committer_email: actions@github.com
          cwd: "."
          default_author: github_actor
          fetch: true
          message: "increment version number"
          pathspec_error_handling: exitImmediately
          push: true
