name: Auto-version
on:
  workflow_dispatch:

jobs:
  close:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      closed: ${{ steps.close.outputs.closed }}
      issue: ${{ steps.issue.outputs.issue }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install towncrier requests

      ## Optional step?
      - name: Increment version number based on newsfragments
        id: bump_version
        run: |
          import os
          import re

          version_file = 'code/django/version.txt'
          with open(version_file, 'r') as file:
              version = file.read().strip()

          match = re.match(r'(\d+)\.(\d+)\.(\d+)(-.+)?', version)
          if not match:
              raise ValueError("Invalid version format")

          major, minor, patch, suffix = match.groups()
          major = int(major)
          minor = int(minor)
          patch = int(patch)

          bugfix_count = 0
          feature_count = 0
          for root, dirs, files in os.walk("newsfragments"):
              for file in files:
                  if file.endswith(".bugfix"):
                      bugfix_count += 1
                  elif file.endswith(".feature"):
                      feature_count += 1

          if feature_count > 0:
              minor += 1
              patch = 0
          elif bugfix_count > 0:
              patch += 1

          new_version = f"{major}.{minor}.{patch}"
          if suffix:
              new_version += suffix
              
          with open(version_file, 'w') as file:
              file.write(new_version)

          print(f"::set-output name=new_version::{new_version}")
          os.environ["NEW_VERSION"] = new_version
          with open(os.environ["GITHUB_ENV"], "a") as env_file:
              env_file.write(f"NEW_VERSION={new_version}\n")

      - name: Create GitHub Tag
        id: tag_version
        run: |
          echo "New version: ${{ steps.bump_version.outputs.new_version }}"
          git tag v${{ steps.bump_version.outputs.new_version }}
          git push origin v${{ steps.bump_version.outputs.new_version }}

      - name: Read Release Notes
        id: release_notes
        run: |
          RELEASE_NOTES=$(cat NEWS.rst)
          echo "::set-output name=notes::$RELEASE_NOTES"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: EndBug/add-and-commit@v9
        with:
          ref: ${{ github.ref }}
          add: code/django/version.txt
          author_name: 'Github Actions - Releasing Workflow'
          author_email: actions@github.com
          commit: --signoff
          committer_name: 'Github Actions - Releasing Workflow'
          committer_email: actions@github.com
          cwd: "."
          default_author: github_actor
          fetch: true
          message: "increment version number"
          pathspec_error_handling: exitImmediately
          push: true

      - name: Clear newsfragments and NEWS.rst
        run: |
          rm -rf newsfragments/!(.gitignore)
          echo '' > NEWS.rst

      - name: Commit and Push Clear newsfragments and NEWS.rst
        uses: EndBug/add-and-commit@v9
        with:
          ref: ${{ github.ref }}
          add: newsfragments NEWS.rst
          author_name: 'Github Actions - Releasing Workflow'
          author_email: actions@github.com
          commit: --signoff
          committer_name: 'Github Actions - Releasing Workflow'
          committer_email: actions@github.com
          cwd: "."
          default_author: github_actor
          fetch: true
          message: "Clear newsfragments and NEWS.rst"
          pathspec_error_handling: exitImmediately
          push: true
